/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/5.0/userguide/java_library_plugin.html
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
        id 'jacoco'
        id 'java'
        id 'application'
}


repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    flatDir {
        dirs 'libs'
    }
}


jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.

    testCompile group: 'org.testng', name: 'testng', version:'6.14.3'
    compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.+'
    runtime group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.+'


    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
        
        
}


test {
jacoco {
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }

  
}


task smokeTests(type: Test) { // we define a task with name ‘smokeTests’
   useTestNG() {
       useDefaultListeners = true
       suites 'testng.xml'
   }
}

mainClassName = 'selanium.Library'


jar {
  manifest {
    attributes 'Main-Class': 'selanium.Library',
    'Class-Path': configurations.runtime.files.collect { "lib/$it.name" }.join(' '),
                'Implementation-Version': project.version
    
  }
      from(configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }) {}
  
}

